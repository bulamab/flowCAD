# =============================================================================
# src/flowcad/gui/components/drawing_canvas.py - Version adapt√©e
# =============================================================================
"""
Zone de dessin principale avec support drag & drop d'√©quipements hydrauliques
"""

from PyQt5.QtWidgets import (QGraphicsView, QGraphicsScene, QGraphicsItem, QGraphicsPathItem, 
                            QApplication, QMenu)
from PyQt5.QtCore import Qt, pyqtSignal, QPointF
from PyQt5.QtGui import QPen, QColor, QBrush, QWheelEvent, QContextMenuEvent
import json
from typing import Dict, List, Optional, Tuple

# Import de la nouvelle classe graphique
from ..graphics.equipment_graphics import *

from ..graphics.polyline_graphics import *

class DrawingCanvas(QGraphicsView):
    """Zone de dessin principale pour FlowCAD"""
    
    # Signaux √©mis par le canvas
    equipment_dropped = pyqtSignal(str, dict, tuple)  # (equipment_id, equipment_def, position)
    equipment_selected = pyqtSignal(str)              # equipment_id
    equipment_deleted = pyqtSignal(str)               # equipment_id
    port_selected = pyqtSignal(str, str)              # (equipment_id, port_id)

    #pipe_properties_requested = pyqtSignal()          # Signal √©mis lorsque les propri√©t√©s du tuyau sont demand√©es
    equipment_properties_requested = pyqtSignal(dict, str)  # Envoie directement les donn√©es de l'√©quipement s√©lectionn√©
    pipe_properties_requested = pyqtSignal()  # Demande les propri√©t√©s
    pipe_properties_received = pyqtSignal(dict)  # Re√ßoit les propri√©t√©s


    polyline_creation_finished = pyqtSignal()         # Signal √©mis lorsque la cr√©ation de la polyligne est termin√©e

    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Configuration de base
        self.setup_view()
        self.setup_scene()
        
        # Gestion des √©quipements
        self.equipment_counter = 0
        self.equipment_items: Dict[str, EquipmentGraphicsItem] = {}

        #liste des √©quipements s√©lectionn√©s, dans l'ordre
        self.selected_equipments: List[str] = []
        
        # Loader pour les chemins SVG (√† connecter avec votre loader)
        self.equipment_loader = None  # Sera d√©fini par la main_window
        
        # Mode d'interaction
        self.interaction_mode = "select"  # "select", "create_polyline", "draw"
    
        # Variables pour la cr√©ation de polylignes
        self.current_polyline = None  # Polyligne en cours de cr√©ation
        self.polyline_points = []     # Points de la polyligne en cours
        self.start_port = None        # Port de d√©part
        self.preview_line = None      # Ligne de pr√©visualisation
        self.is_creating_polyline = False  # Flag de cr√©ation active
        self.cached_pipe_properties = None  # Pour stocker les propri√©t√©s du tuyau en cours de cr√©ation
        self.current_pipe_properties = None  # Pour stocker les propri√©t√©s du tuyau en cours de cr√©ation

        # Variables pour le routage de polylignes
        self.orthogonal_routing_enabled = True
        self.routing_preference = "horizontal_first"  # "auto", "horizontal_first", "vertical_first"
        self.routing_optimization = True  # Supprimer les points redondants
        self.routing_tolerance = 0.1     # Tol√©rance pour l'orthogonalit√©

        # Liste des polylignes cr√©√©es
        self.polyline_counter = 0
        #self.polylines: List[PolylineGraphicsItem] = []
        self.polylines: Dict[str, PolylineGraphicsItem] = {}
        #variables pour la cr√©ation de polylignes
        self.locked_direction = None        # "horizontal", "vertical", ou None
        self.direction_lock_threshold = 10  # Distance minimale pour verrouiller la direction

        #self.init_pipe_style_sync() #plus besoin, se fait automatiquement
        # Connecter le signal de r√©ception des propri√©t√©s
        self.pipe_properties_received.connect(self.on_pipe_properties_received)
        
    # Ajouter des m√©thodes utilitaires pour les contr√¥les UI

    def set_pipe_color_theme(self, theme: str):
        """Applique un th√®me de couleur pr√©d√©fini"""
        
        themes = {
            'blue': {
                'normal': '#4682B4',
                'selected': '#FF8C00', 
                'hover': '#1E90FF'
            },
            'green': {
                'normal': '#228B22',
                'selected': '#FF6347',
                'hover': '#32CD32'  
            },
            'red': {
                'normal': '#DC143C',
                'selected': '#FFD700',
                'hover': '#FF1493'
            },
            'purple': {
                'normal': '#9932CC',
                'selected': '#FF69B4',
                'hover': '#DA70D6'
            }
        }
        
        if theme in themes:
            colors = themes[theme]
            self.update_pipe_styles(
                normal_color=colors['normal'],
                selected_color=colors['selected'], 
                hover_color=colors['hover']
            )
            print(f"üé® Th√®me '{theme}' appliqu√©")
        else:
            print(f"‚ö†Ô∏è Th√®me inconnu: {theme}")

    def get_pipe_style_info(self):
        """Retourne les informations sur les styles actuels"""
        return {
            'normal': pipe_style_manager.get_pipe_style('normal'),
            'selected': pipe_style_manager.get_pipe_style('selected'),
            'hover': pipe_style_manager.get_pipe_style('hover'),
            'cache_size': len(pipe_style_manager.modified_svg_cache)
        }
        
    def setup_view(self):
        """Configure la vue graphique"""
        
        # Style de base
        self.setStyleSheet("background-color: white; border: 1px solid #ccc;")
        
        # Mode de s√©lection
        self.setDragMode(QGraphicsView.RubberBandDrag)  # S√©lection par zone
        
        # Activer le drag & drop
        self.setAcceptDrops(True)
        
        # Activer le zoom avec la molette
        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)
        
        # Anti-aliasing pour un rendu plus lisse
        #self.setRenderHint(self.renderHints() | self.renderHints().Antialiasing)
    
    def setup_scene(self):
        """Configure la sc√®ne graphique"""
        
        # Cr√©er la sc√®ne
        self.scene = QGraphicsScene()
        self.setScene(self.scene)
        
        # D√©finir une grande zone de travail
        self.scene.setSceneRect(-1000, -1000, 4000, 4000)
        
        # Connecter les signaux de s√©lection de la sc√®ne
        self.scene.selectionChanged.connect(self.on_selection_changed)
        
        # Dessiner la grille de fond
        self.draw_background_grid()
    
    def draw_background_grid(self):
        """Dessine une grille de fond pour faciliter le positionnement"""
        
        scene_rect = self.scene.sceneRect()
        grid_size = 50
        
        # Couleur de grille discr√®te
        grid_pen = QPen(QColor(230, 230, 230), 0.5)
        
        # Lignes verticales
        x = scene_rect.left()
        while x <= scene_rect.right():
            self.scene.addLine(x, scene_rect.top(), x, scene_rect.bottom(), grid_pen)
            x += grid_size
        
        # Lignes horizontales  
        y = scene_rect.top()
        while y <= scene_rect.bottom():
            self.scene.addLine(scene_rect.left(), y, scene_rect.right(), y, grid_pen)
            y += grid_size
    
    def set_equipment_loader(self, loader):
        """D√©finit le loader pour obtenir les chemins SVG"""
        self.equipment_loader = loader
    
    # =============================================================================
    # GESTION DU DRAG & DROP
    # =============================================================================
    
    def dragEnterEvent(self, event):
        """D√©but du drag sur le canvas"""
        if event.mimeData().hasFormat('application/x-flowcad-equipment'):
            print("üéØ Drag d√©tect√© sur le canvas")
            event.acceptProposedAction()
            
            # Optionnel : changer le curseur ou afficher un aper√ßu
            self.setCursor(Qt.CrossCursor)
        else:
            event.ignore()
    
    def dragMoveEvent(self, event):
        """Mouvement pendant le drag"""
        if event.mimeData().hasFormat('application/x-flowcad-equipment'):
            event.acceptProposedAction()
        else:
            event.ignore()
    
    def dragLeaveEvent(self, event):
        """Fin du drag (sortie du canvas)"""
        self.setCursor(Qt.ArrowCursor)
        super().dragLeaveEvent(event)
    
    def dropEvent(self, event):
        """Drop d'un √©quipement sur le canvas"""
        if event.mimeData().hasFormat('application/x-flowcad-equipment'):
            
            # Remettre le curseur normal
            self.setCursor(Qt.ArrowCursor)
            
            # D√©coder les donn√©es de l'√©quipement
            json_data = event.mimeData().data('application/x-flowcad-equipment').data().decode()
            equipment_data = json.loads(json_data)
            print("üéØ Drop re√ßu:", equipment_data)
            
            equipment_id = equipment_data['equipment_id']
            equipment_def = equipment_data['equipment_def']
            equipment_properties = equipment_def.get('properties', {})

            # Position du drop en coordonn√©es de sc√®ne
            scene_pos = self.mapToScene(event.pos())
            drop_position = (scene_pos.x(), scene_pos.y())
            
            # Aligner sur la grille (optionnel)
            aligned_pos = self.align_to_grid(scene_pos)

            print(f"üéØ Drop de {equipment_id} √† la position {aligned_pos.x():.1f}, {aligned_pos.y():.1f}\nPropri√©t√©s de l'√©quipement: {json.dumps(equipment_properties, indent=2, ensure_ascii=False)}")

            # Cr√©er l'√©quipement sur le canvas
            self.add_equipment(equipment_id, equipment_def, aligned_pos)
            
            # √âmettre le signal
            self.equipment_dropped.emit(equipment_id, equipment_def, drop_position)
            
            event.acceptProposedAction()
        else:
            event.ignore()
    
    def align_to_grid(self, pos: QPointF, grid_size: int = 25) -> QPointF:
        """Aligne une position sur la grille"""
        aligned_x = round(pos.x() / grid_size) * grid_size
        aligned_y = round(pos.y() / grid_size) * grid_size
        return QPointF(aligned_x, aligned_y)
    
    # =============================================================================
    # GESTION DE LA SOURIS
    # =============================================================================
    def mousePressEvent(self, event):
        """Gestion des clics avec d√©tection prioritaire des ports"""
        
        if self.interaction_mode == "create_polyline" and self.is_creating_polyline:
            if event.button() == Qt.LeftButton:
                
                # ‚ö†Ô∏è CORRECTION: Chercher sp√©cifiquement un port
                scene_pos = self.mapToScene(event.pos())
                items_at_pos = self.scene.items(scene_pos)
                
                # Filtrer pour ne garder que les ports
                port_item = None
                for item in items_at_pos:
                    if isinstance(item, PortGraphicsItem):
                        port_item = item
                        break
                
                if port_item:
                    # Clic sur un port - terminer la polyligne
                    print(f"üéØ Port d√©tect√©: {port_item.port_id}")
                    self.handle_port_click_for_polyline(port_item)
                    event.accept()
                    return
                else:
                    # Pas de port - ajouter un point interm√©diaire
                    constrained_pos = self.apply_orthogonal_constraint(scene_pos)
                    self.add_polyline_point(constrained_pos)
                    event.accept()
                    return
            
            elif event.button() == Qt.RightButton:
                self.cancel_polyline_creation()
                event.accept()
                return

        super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        """Mouvement de souris pour pr√©visualisation"""
        
        if self.interaction_mode == "create_polyline" and self.is_creating_polyline:
            scene_pos = self.mapToScene(event.pos())
            
            # Appliquer les contraintes orthogonales
            constrained_pos = self.apply_orthogonal_constraint(scene_pos)
            
            # Mettre √† jour la pr√©visualisation
            self.update_polyline_preview(constrained_pos)
            event.accept()
            return
        
        super().mouseMoveEvent(event)

    #---------------------------------------------------------------------------------
    # Fonctions pour le dessin de tuyau
    #---------------------------------------------------------------------------------

    def apply_orthogonal_constraint(self, pos: QPointF) -> QPointF:
        """Applique les contraintes orthogonales (mouvement H ou V uniquement)"""
        
        if not self.polyline_points:
            return pos
        
        last_point = self.polyline_points[-1]
        
        # Calculer les distances depuis le dernier point
        dx = abs(pos.x() - last_point.x())
        dy = abs(pos.y() - last_point.y())

        # Si aucune direction n'est verrouill√©e, d√©terminer la direction
        if self.locked_direction is None:
            
            # V√©rifier si on a d√©pass√© le seuil pour verrouiller
            if max(dx, dy) >= self.direction_lock_threshold:
                if dx > dy:
                    self.locked_direction = "horizontal"
                    print(f"üîí Direction verrouill√©e: HORIZONTALE")
                else:
                    self.locked_direction = "vertical"
                    print(f"üîí Direction verrouill√©e: VERTICALE")
            
            # Pas encore de verrouillage, suivre la direction dominante
            if dx > dy:
                return QPointF(pos.x(), last_point.y())
            else:
                return QPointF(last_point.x(), pos.y())
        
        # Direction verrouill√©e - appliquer la contrainte
        if self.locked_direction == "horizontal":
            constrained_pos = QPointF(pos.x(), last_point.y())
        else:  # vertical
            constrained_pos = QPointF(last_point.x(), pos.y())
        
        # V√©rifier si on revient au point pr√©c√©dent pour d√©verrouiller
        distance_to_last = self.distance_between_points(pos, last_point)
        if distance_to_last < self.direction_lock_threshold / 2:  # Hysteresis
            self.unlock_direction()
            return pos  # Permettre le mouvement libre pr√®s du point de d√©part
        
        return constrained_pos
    
    def distance_between_points(self, p1: QPointF, p2: QPointF) -> float:
        """Calcule la distance entre deux points"""
        dx = p1.x() - p2.x()
        dy = p1.y() - p2.y()
        return (dx*dx + dy*dy)**0.5
    
    def unlock_direction(self):
        """D√©verrouille la direction et permet un nouveau choix"""
        if self.locked_direction:
            print(f"üîì Direction d√©verrouill√©e (√©tait: {self.locked_direction})")
            self.locked_direction = None
        
    def handle_port_click_for_polyline(self, port):
        """G√®re les clics sur ports - MISE √Ä JOUR avec contraintes"""
        print
        if not self.start_port:
            # Premier clic - d√©marrer la polyligne
            if not port.can_connect():
                print(f"‚ùå Port {port.port_id} ne peut pas √™tre utilis√© comme point de d√©part")
                return
            
            self.start_port = port
            port.set_connection_status(PortConnectionStatus.RESERVED)
            port.set_visual_state(PortVisualState.SELECTED)
            
            # Position de d√©part
            rect = port.boundingRect() #le bounding rect
            start_pos = port.scenePos()+rect.center() #le centre du port
            self.polyline_points = [start_pos]
            
            # R√©initialiser le verrouillage pour cette nouvelle polyligne
            self.locked_direction = None

            # Cr√©er la polyligne de pr√©visualisation
            self.current_polyline = PolylineGraphicsItem([start_pos, start_pos])
            self.current_polyline.setFlag(QGraphicsPathItem.ItemIsSelectable, False)
            self.current_polyline.setAcceptHoverEvents(False)
            self.current_polyline.setZValue(-10)  # Tr√®s en arri√®re-plan

            self.scene.addItem(self.current_polyline)
            
            # Activer le mode cr√©ation
            self.is_creating_polyline = True
            
            print(f"üöÄ D√©but de polyligne depuis {port.port_id}")
            print("   üí° Clic gauche = ajouter point, Clic droit = annuler")
            
            # Mettre √† jour le statut
            if hasattr(self.parent(), 'statusBar'):
                self.parent().statusBar().showMessage(
                    "Cr√©ation polyligne: Clic gauche = point, clic droit = annuler, clic sur port = terminer"
                )
            
        else:
            # Clic sur un port pour terminer
            if port == self.start_port:
                print("‚ùå Ne peut pas connecter un port √† lui-m√™me")
                return
            
            if not port.can_connect():
                print(f"‚ùå Port {port.port_id} ne peut pas √™tre utilis√© comme point d'arriv√©e")
                return
            
            # Ajouter le point final
            rect = port.boundingRect() #le bounding rect
            end_pos = port.scenePos()+rect.center() #le centre du port

            # Appliquer contrainte orthogonale pour le dernier segment
            if len(self.polyline_points) >= 1:
                constrained_end = self.apply_orthogonal_constraint(end_pos)
                print(f"üîß Contrainte appliqu√©e au point final: ({constrained_end.x():.1f}, {constrained_end.y():.1f})")

                # V√©rifier si on a besoin d'un point interm√©diaire
                start_pos = self.polyline_points[0]
                
                # Toujours ajouter le point contraint s'il est diff√©rent du point final
                if (abs(constrained_end.x() - end_pos.x()) > 1 or 
                    abs(constrained_end.y() - end_pos.y()) > 1):
                    
                    self.polyline_points.append(constrained_end)
                    print(f"üìç Point interm√©diaire ajout√©: ({constrained_end.x():.1f}, {constrained_end.y():.1f})")
            
            self.polyline_points.append(end_pos)
            
            print(f"üèÅ Fin de polyligne sur {port.port_id}")
            
            # Finaliser la polyligne
            self.finalize_polyline(port)

    def add_polyline_point(self, pos: QPointF):
        """Ajoute un point interm√©diaire √† la polyligne en cours"""
        
        if not self.is_creating_polyline:
            return
        
        self.polyline_points.append(pos)

        #R√©initialiser le verrouillage pour le prochain segment
        print(f"üìç Point ajout√©: ({pos.x():.1f}, {pos.y():.1f})")
        print(f"üîì Direction r√©initialis√©e pour le prochain segment")
        self.locked_direction = None
        
        # Mettre √† jour la polyligne de pr√©visualisation
        if self.current_polyline:
            self.current_polyline.points = self.polyline_points.copy()
            # Ajouter un point temporaire pour la suite
            self.current_polyline.points.append(pos)
            self.current_polyline.update_path()
        
        print(f"üìç Point ajout√©: ({pos.x():.1f}, {pos.y():.1f})")
        print(f"   Total points: {len(self.polyline_points)}")

    def update_polyline_preview(self, pos: QPointF):
        """Met √† jour la pr√©visualisation de la polyligne"""
        
        if not self.current_polyline or not self.is_creating_polyline:
            return
        
        # Copier les points existants
        preview_points = self.polyline_points.copy()
        preview_points.append(pos)
        
        # Mettre √† jour la polyligne de pr√©visualisation
        self.current_polyline.points = preview_points
        self.current_polyline.update_path()

    def finalize_polyline(self, end_port):
        """Finalise la cr√©ation de la polyligne"""
        
        if len(self.polyline_points) < 2:
            print("‚ùå Pas assez de points pour cr√©er une polyligne")
            self.cancel_polyline_creation()
            return

        # Sauvegarder les r√©f√©rences
        start_port = self.start_port
        end_port_ref = end_port
        points_copy = self.polyline_points.copy()
        # Ajouter des points si seulement 2 points
        enhanced_points = self.add_intermediate_points_if_needed(points_copy)
                
        # Supprimer la polyligne de pr√©visualisation
        if self.current_polyline:
            self.scene.removeItem(self.current_polyline)
            self.current_polyline = None

        # G√©n√©rer un ID unique pour cette instance
        unique_pipe_id = f"pipe_{self.polyline_counter:03d}"
        self.polyline_counter += 1

        # Cr√©er la polyligne finale
        final_polyline = PolylineGraphicsItem(
            enhanced_points, 
            self.start_port, 
            end_port,
            pipe_id=unique_pipe_id
        )
        
        #modifier les propri√©t√©s par d√©faut
        pipe_properties = self.request_pipe_properties()
        print(f"Propri√©t√©s du tuyau : {pipe_properties}")
        final_polyline.update_properties(pipe_properties or {})

        self.scene.addItem(final_polyline)
        self.polylines[unique_pipe_id] = final_polyline
        
        # Marquer les ports comme connect√©s
        self.start_port.set_connection_status(PortConnectionStatus.CONNECTED)
        end_port.set_connection_status(PortConnectionStatus.CONNECTED)
        
        # √âtats visuels normaux
        self.start_port.set_visual_state(PortVisualState.NORMAL)
        end_port.set_visual_state(PortVisualState.NORMAL)
        
        print(f"‚úÖ Polyligne cr√©√©e avec {len(self.polyline_points)} points")
        
        # R√©initialiser
        self.reset_polyline_creation()
        
        # Retourner au mode s√©lection
        self.set_interaction_mode("select")

        # √âmettre le signal de fin de cr√©ation
        self.polyline_creation_finished.emit()
        print("üì° Signal polyline_creation_finished √©mis")

    def add_intermediate_points_if_needed(self, points: List[QPointF]) -> List[QPointF]:
        """Ajoute des points si seulement 2 points"""
        
        if len(points) == 2:
            start_point = points[0]
            end_point = points[1]
            
            # Point au milieu exact
            mid_x = start_point.x() + (end_point.x() - start_point.x()) * 0.5
            mid_y = start_point.y() + (end_point.y() - start_point.y()) * 0.5
            
            # Cr√©er 2 points superpos√©s au milieu
            middle_point1 = QPointF(mid_x, mid_y)
            middle_point2 = QPointF(mid_x, mid_y)
            
            print(f"‚úÖ Ajout de 2 points au milieu: ({mid_x:.1f}, {mid_y:.1f})")
            
            return [start_point, middle_point1, middle_point2, end_point]
        elif len(points) == 3:
            # Nouveau cas : 3 points - dupliquer le point final
            duplicated_end_point = QPointF(points[-1].x(), points[-1].y())
        
            print(f"Ajout d'un point dupliqu√© √† la fin: ({duplicated_end_point.x():.1f}, {duplicated_end_point.y():.1f})")
        
            return points + [duplicated_end_point]

        else:
            return points  # D√©j√† assez de points



    def reset_polyline_creation(self):
        """Remet √† z√©ro les variables de cr√©ation"""
        self.current_polyline = None
        self.polyline_points = []
        self.start_port = None
        self.is_creating_polyline = False

        # D√©verrouiller la direction
        self.unlock_direction()

    def cancel_polyline_creation(self):
        """Annule la cr√©ation de polyligne - MISE √Ä JOUR"""

        # ‚ö†Ô∏è GUARD: Ne rien faire si pas de cr√©ation en cours
        if not self.is_creating_polyline and not self.start_port:
            print("üîç cancel_polyline_creation appel√© mais pas de cr√©ation en cours")
            return
        
        # Lib√©rer le port de d√©part
        if self.start_port:
            self.start_port.set_connection_status(PortConnectionStatus.DISCONNECTED)
            self.start_port.set_visual_state(PortVisualState.NORMAL)
        
        # Supprimer la polyligne de pr√©visualisation
        if self.current_polyline:
            self.scene.removeItem(self.current_polyline)
        
        # R√©initialiser
        self.reset_polyline_creation()
        
        print("‚ùå Cr√©ation de polyligne annul√©e")
        
        # Retourner au mode s√©lection
        self.set_interaction_mode("select")

        # √âmettre le signal de fin de cr√©ation (m√™me en cas d'annulation)
        self.polyline_creation_finished.emit()
        print("üì° Signal polyline_creation_finished √©mis (annulation)")

    def remove_polyline(self, polyline: PolylineGraphicsItem):
        """Supprime une polyligne et lib√®re ses ports"""
        
        polyline.destroy()  # D√©senregistre des √©quipements

        # Lib√©rer les ports connect√©s
        if polyline.start_port:
            polyline.start_port.set_connection_status(PortConnectionStatus.DISCONNECTED)
        if polyline.end_port:
            polyline.end_port.set_connection_status(PortConnectionStatus.DISCONNECTED)

        # Supprimer de la sc√®ne
        self.scene.removeItem(polyline)
        
        # Supprimer de notre liste
        if polyline in self.polylines:
            self.polylines.remove(polyline)
        
        print("üóëÔ∏è Polyligne supprim√©e")

    def set_direction_lock_threshold(self, threshold: int):
        """D√©finit le seuil de verrouillage de direction"""
        self.direction_lock_threshold = max(5, threshold)  # Minimum 5 pixels
        print(f"üéõÔ∏è Seuil de verrouillage: {self.direction_lock_threshold} pixels")

    def set_orthogonal_routing(self, enabled: bool):
        """Active/d√©sactive le routage orthogonal automatique"""
        self.orthogonal_routing_enabled = enabled
        print(f"üìê Routage orthogonal: {'ON' if enabled else 'OFF'}")
    
    def set_routing_preference(self, preference: str):
        """D√©finit la pr√©f√©rence de routage : 'auto', 'horizontal_first', 'vertical_first'"""
        if preference in ["auto", "horizontal_first", "vertical_first"]:
            self.routing_preference = preference
            print(f"üìê Pr√©f√©rence de routage: {preference}")
        else:
            print(f"‚ö†Ô∏è Pr√©f√©rence invalide: {preference}")
    
    def toggle_routing_optimization(self):
        """Toggle l'optimisation des chemins"""
        self.routing_optimization = not self.routing_optimization
        print(f"üìê Optimisation des chemins: {'ON' if self.routing_optimization else 'OFF'}")
        return self.routing_optimization

    def request_pipe_properties(self) -> Dict[str, float]:
        """Demande les propri√©t√©s du tuyau au panneau de connexion"""
        # √âmettre le signal de demande
        self.pipe_properties_requested.emit()
        
        # Retourner les propri√©t√©s actuelles (ou valeurs par d√©faut)
        if self.current_pipe_properties:
            return self.current_pipe_properties
        else:
            # Valeurs par d√©faut si pas encore re√ßues
            return {
                "diameter_m": 0.1,
                "length_m": 1.0,
                "roughness_mm": 0.1
            }
    
    def on_pipe_properties_received(self, properties):
        """Callback quand les propri√©t√©s du tuyau sont re√ßues"""
        self.current_pipe_properties = properties
        print(f"Propri√©t√©s du tuyau re√ßues : {properties}")


    # =============================================================================
    # GESTION DES √âQUIPEMENTS
    # =============================================================================

    def add_equipment(self, equipment_type: str, equipment_def: dict, position: QPointF) -> str:
        """Ajoute un √©quipement sur le canvas"""
        
        # G√©n√©rer un ID unique pour cette instance
        unique_id = f"{equipment_type}_{self.equipment_counter:03d}"
        self.equipment_counter += 1
        
        # Obtenir le chemin SVG si le loader est disponible
        svg_path = None
        if self.equipment_loader:
            try:
                svg_path = self.equipment_loader.get_svg_path(equipment_type)
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du chargement du SVG pour {equipment_type}: {e}")
        
        # Cr√©er l'√©l√©ment graphique
        equipment_item = EquipmentGraphicsFactory.create_equipment_graphics(
            unique_id, equipment_def, svg_path
        )
        
        # Positionner l'√©quipement
        equipment_item.setPos(position)
        
        # Ajouter √† la sc√®ne
        self.scene.addItem(equipment_item)
        
        # Stocker la r√©f√©rence
        self.equipment_items[unique_id] = equipment_item
        
        # Connecter les signaux des ports (si n√©cessaire)
        self.connect_equipment_signals(equipment_item)

        print(f"‚úÖ √âquipement {unique_id} ajout√© √† {position.x():.1f}, {position.y():.1f} avec d√©finition: {json.dumps(equipment_def, ensure_ascii=False)}")

        return unique_id
    
    def connect_equipment_signals(self, equipment_item: EquipmentGraphicsItem):
        """Connecte les signaux d'un √©quipement et de ses ports"""
        
        # Pour l'instant, on g√®re les clics sur ports directement dans PortGraphicsItem
        # Plus tard, on pourra ajouter des signaux personnalis√©s si n√©cessaire
        pass
    
    def remove_equipment(self, equipment_id: str) -> bool:
        """Supprime un √©quipement du canvas"""
        
        if equipment_id in self.equipment_items:
            equipment_item = self.equipment_items[equipment_id]

            #supprimer les polylignes associ√©es 
            polylines_to_remove = equipment_item.connected_polylines.copy()
            for polyline in polylines_to_remove:
                self.remove_polyline(polyline)
            
            # Retirer de la sc√®ne
            self.scene.removeItem(equipment_item)
            
            # Retirer de notre dictionnaire
            del self.equipment_items[equipment_id]
            
            print(f"üóëÔ∏è √âquipement {equipment_id} supprim√©")
            
            # √âmettre le signal
            self.equipment_deleted.emit(equipment_id)
            
            return True
        
        return False
    
    def get_equipment(self, equipment_id: str) -> Optional[EquipmentGraphicsItem]:
        """R√©cup√®re un √©quipement par son ID"""
        return self.equipment_items.get(equipment_id)
    
    def get_pipe(self, pipe_id: str) -> Optional[PolylineGraphicsItem]:
        """R√©cup√®re un tuyau par son ID"""
        return self.polylines.get(pipe_id)
    
    def get_all_equipment(self) -> Dict[str, EquipmentGraphicsItem]:
        """R√©cup√®re tous les √©quipements"""
        return self.equipment_items.copy()

    def get_all_polylines(self) -> Dict[str, PolylineGraphicsItem]:
        """R√©cup√®re tous les tuyaux"""
        return self.polylines.copy()

    def clear_all_equipment(self):
        """Supprime tous les √©quipements"""
        for equipment_id in list(self.equipment_items.keys()):
            self.remove_equipment(equipment_id)

    def update_equipment_properties(self, equipment_id: str, new_properties: dict):
        """Met √† jour les propri√©t√©s d'un √©quipement"""
        
        equipment_item = self.get_equipment(equipment_id)
        if equipment_item:
            equipment_item.update_properties(new_properties)
            print(f"üîß Propri√©t√©s de {equipment_id} mises √† jour: {json.dumps(new_properties, ensure_ascii=False)}")
            return True
        else:
            print(f"‚ö†Ô∏è √âquipement {equipment_id} non trouv√© pour mise √† jour")
            return False

    def update_pipe_properties(self, pipe_id: str, new_properties: dict):
        """Met √† jour les propri√©t√©s d'un tuyau"""
        pipe_item = self.get_pipe(pipe_id)
        if pipe_item:
            pipe_item.update_properties(new_properties)
            print(f"üîß Propri√©t√©s du tuyau {pipe_id} mises √† jour: {json.dumps(new_properties, ensure_ascii=False)}")
            return True
        else:
            print(f"‚ö†Ô∏è Tuyau {pipe_id} non trouv√© pour mise √† jour")
            return False


    # =============================================================================
    # GESTION DE LA S√âLECTION
    # =============================================================================
    
    def on_selection_changed(self):
        """Callback quand la s√©lection change dans la sc√®ne"""
        
        selected_items = self.scene.selectedItems()

        #gestion de l'affichage des propri√©t√©s dans le panneau lat√©ral -----------------------------------
        #propri√©t√©s affich√©es uniquement si 1 √©l√©ment est s√©lectionn√©. si 0 ou plusieurs, panneau vide
        #regarde si il y a un equipement ou un tuyau s√©lectionn√©
        equipment_or_pipe_items = [item for item in selected_items if isinstance(item, (EquipmentGraphicsItem, PolylineGraphicsItem))]

        #si un seul √©quipement s√©lectionn√©, affiche ses propri√©t√©s
        if len(equipment_or_pipe_items) == 1:
            properties_data = {}
            #si l'√©quipement est un tuyau
            if isinstance(equipment_or_pipe_items[0], PolylineGraphicsItem):
                pipe = equipment_or_pipe_items[0]
                properties_data = pipe.pipe_def
                properties_data["ID"] = pipe.pipe_id
                properties_data["display_name"] = "Tuyau"
                properties_data["description"] = "Tuyau de connexion"
                properties_data["equipment_class"] = "PipeConnectionEquipment"

                self.equipment_properties_requested.emit(properties_data, "pipe")
            else:  # si l'√©quipement est un √©quipement standard
                equipment = equipment_or_pipe_items[0]
                properties_data = equipment.equipment_def
                properties_data["ID"] = equipment.equipment_id
                print(f"üìã Affichage des propri√©t√©s de {equipment.equipment_id}")
                self.equipment_properties_requested.emit(properties_data, "equipment")

        #si 0 ou plusieurs, pas de propri√©t√©s affich√©es
        else:  #0 ou plusieurs √©quipements s√©lectionn√©s
            print("üìã Aucune propri√©t√© affich√©e (0 ou plusieurs √©quipements s√©lectionn√©s)")
            self.equipment_properties_requested.emit({}, "none")



        #afficher tous les √©l√©ments s√©lectionn√©s
        eq_id_in_list = []
        for item in selected_items:
            if isinstance(item, EquipmentGraphicsItem):
                print(f"üìç √âquipement s√©lectionn√©: {item.equipment_id}")
                self.equipment_selected.emit(item.equipment_id)
                #mettre √† jour la liste des √©quipements s√©lectionn√©s
                eq_id_in_list.append(item.equipment_id)

                if item.equipment_id not in self.selected_equipments:
                    self.selected_equipments.append(item.equipment_id)

            elif isinstance(item, PortGraphicsItem):
                parent_eq = item.parent_equipment
                if parent_eq:
                    print(f"üîå Port s√©lectionn√©: {item.port_id} de {parent_eq.equipment_id}")
                    self.port_selected.emit(parent_eq.equipment_id, item.port_id)
        #retire les √©l√©ments de la liste self.selected_equipments qui ne sont plus dans

        print(f"eq_id_in_lists: {eq_id_in_list}")
        print(f"√âquipements s√©lectionn√©s: {self.selected_equipments}")
        #retire les √©l√©ments de la liste self.selected_equipments qui ne sont plus dans eq_id_in_list
        self.selected_equipments = [eq_id for eq_id in self.selected_equipments if eq_id in eq_id_in_list]

    def select_equipment(self, equipment_id: str):
        """S√©lectionne un √©quipement par programme"""
        equipment_item = self.get_equipment(equipment_id)
        if equipment_item:
            # D√©s√©lectionner tout
            self.scene.clearSelection()
            # S√©lectionner l'√©quipement
            equipment_item.setSelected(True)
            # Centrer la vue sur l'√©quipement
            self.centerOn(equipment_item)
    
    # =============================================================================
    # INTERACTION UTILISATEUR
    # =============================================================================
    
    def wheelEvent(self, event: QWheelEvent):
        """Zoom avec la molette de la souris"""
        
        # Facteur de zoom
        zoom_factor = 1.15
        
        if event.angleDelta().y() > 0:
            # Zoom avant
            self.scale(zoom_factor, zoom_factor)
        else:
            # Zoom arri√®re
            self.scale(1 / zoom_factor, 1 / zoom_factor)
    
    def keyPressEvent(self, event):
        """Gestion des raccourcis clavier"""
        
        if event.key() == Qt.Key_Delete:
            # Supprimer les √©l√©ments s√©lectionn√©s
            self.delete_selected_items()
        
        elif event.key() == Qt.Key_A and event.modifiers() & Qt.ControlModifier:
            # Ctrl+A : S√©lectionner tout
            for item in self.scene.items():
                if isinstance(item, EquipmentGraphicsItem):
                    item.setSelected(True)
        
        elif event.key() == Qt.Key_Escape:
            # √âchap : D√©s√©lectionner tout
            self.scene.clearSelection()
        
        else:
            super().keyPressEvent(event)
    
    def delete_selected_items(self):
        """Supprime les √©quipements s√©lectionn√©s"""
        
        selected_items = self.scene.selectedItems()
        equipment_to_delete = []
        pipes_to_delete = []
        print(f"√©l√©ments s√©lectionn√©s: {selected_items}")

        #la liste des √©quipements √† effacer
        for item in selected_items:
            if isinstance(item, EquipmentGraphicsItem):
                equipment_to_delete.append(item.equipment_id)
        
        #la liste des tuyaux (polylignes) √† effacer
        for item in selected_items:
            if isinstance(item, PolylineGraphicsItem):
                pipes_to_delete.append(item)

        # Supprimer les √©quipements
        for equipment_id in equipment_to_delete:
            self.remove_equipment(equipment_id)


        # Supprimer les tuyaux
        for pipe in pipes_to_delete:
            self.remove_polyline(pipe)

    def contextMenuEvent(self, event: QContextMenuEvent):
        """Menu contextuel (clic droit)"""
        
        # Trouver l'item sous la souris
        scene_pos = self.mapToScene(event.pos())
        item = self.scene.itemAt(scene_pos, self.transform())
        
        if isinstance(item, EquipmentGraphicsItem):
            # Menu pour un √©quipement
            menu = QMenu(self)
            
            # Actions sur l'√©quipement
            properties_action = menu.addAction("üîß Propri√©t√©s")
            rotate_action = menu.addAction("‚Üª Rotation 90¬∞")
            menu.addSeparator()
            delete_action = menu.addAction("üóëÔ∏è Supprimer")
            
            # Ex√©cuter le menu
            action = menu.exec_(event.globalPos())
            
            if action == properties_action:
                print(f"Propri√©t√©s de {item.equipment_id}")
                # TODO: Ouvrir le panneau des propri√©t√©s
            
            elif action == rotate_action:
                print(f"Rotation de {item.equipment_id}")
                # TODO: Impl√©menter la rotation
                
            elif action == delete_action:
                self.remove_equipment(item.equipment_id)
        
        else:
            # Menu g√©n√©ral du canvas
            menu = QMenu(self)
            
            clear_action = menu.addAction("üóëÔ∏è Tout effacer")
            menu.addSeparator()
            fit_action = menu.addAction("üîç Ajuster la vue")
            
            action = menu.exec_(event.globalPos())
            
            if action == clear_action:
                self.clear_all_equipment()
            elif action == fit_action:
                self.fit_all_equipment()
    
    # =============================================================================
    # UTILITAIRES DE VUE
    # =============================================================================
    
    def fit_all_equipment(self):
        """Ajuste la vue pour voir tous les √©quipements"""
        if self.equipment_items:
            self.fitInView(self.scene.itemsBoundingRect(), Qt.KeepAspectRatio)
        else:
            # Retour √† la vue par d√©faut
            self.setSceneRect(-500, -500, 1000, 1000)
            self.fitInView(self.sceneRect(), Qt.KeepAspectRatio)
    
    def zoom_to_fit(self):
        """Alias pour fit_all_equipment"""
        self.fit_all_equipment()
    
    def reset_zoom(self):
        """Remet le zoom √† 100%"""
        self.resetTransform()
    
    # =============================================================================
    # M√âTHODES POUR L'INT√âGRATION
    # =============================================================================
    
    def get_equipment_count(self) -> int:
        """Retourne le nombre d'√©quipements sur le canvas"""
        return len(self.equipment_items)
    
    def get_connection_count(self) -> int:
        """Retourne le nombre de connexions (pour plus tard)"""
        # TODO: Impl√©menter quand on aura les connexions
        return 0
    
    def export_equipment_data(self) -> List[dict]:
        """Exporte les donn√©es des √©quipements (pour sauvegarde)"""
        equipment_data = []
        
        for eq_id, eq_item in self.equipment_items.items():
            pos = eq_item.pos()
            data = {
                'equipment_id': eq_id,
                'equipment_def': eq_item.equipment_def,
                'position': {'x': pos.x(), 'y': pos.y()},
                'ports': {}
            }
            
            # Ajouter l'√©tat des ports
            for port_id, port_item in eq_item.ports.items():
                data['ports'][port_id] = {
                    'status': port_item.status.value
                }
            
            equipment_data.append(data)
        
        return equipment_data
    
    def rotate_selected_equipment(self, angle):
        """Fait pivoter les √©quipements s√©lectionn√©s d'un certain angle"""
        print(f"Rotation de l'√©quipement s√©lectionn√© de {angle}¬∞")
        selected_items = self.scene.selectedItems()
        rotated_count = 0
        
        for item in selected_items:
            if isinstance(item, EquipmentGraphicsItem):
                item.set_rotation_angle(angle)
                rotated_count += 1
        
        if rotated_count > 0:
            print(f"üîÑ {rotated_count} √©quipement(s) tourn√©(s)")
            return True
        else:
            print("‚ùå Aucun √©quipement s√©lectionn√© pour la rotation")
            return False
        
    def mirror_selected_equipment(self, direction):
        """Fait un miroir des √©quipements s√©lectionn√©s dans la direction sp√©cifi√©e"""
        print(f"Miroir de l'√©quipement s√©lectionn√©: {direction}")
        selected_items = self.scene.selectedItems()
        mirrored_count = 0

        for item in selected_items:
            if isinstance(item, EquipmentGraphicsItem):
                item.set_mirror_direction(direction)
                mirrored_count += 1

        if mirrored_count > 0:
            print(f"üîÑ {mirrored_count} √©quipement(s) mis en miroir")
            return True
        else:
            print("‚ùå Aucun √©quipement s√©lectionn√© pour le miroir")
            return False
        
    def align_selected_equipment(self, direction):
        print(f"Alignement de l'√©quipement s√©lectionn√©: {direction}")
        #selected_items = self.scene.selectedItems()

        selected_equipments = [self.equipment_items[eq_id] for eq_id in self.selected_equipments if eq_id in self.equipment_items]

        #si au moins deux √©l√©ments, prendre la position du dernier √©l√©ment
        if len(selected_equipments) >= 2:
            last_item = selected_equipments[-1]
            last_pos = last_item.pos()
            last_pos_center = last_item.center
            #print(f"Position de r√©f√©rence pour l'alignement: {last_pos.x()}, {last_pos.y()}\n")
            #print(f"Dimensions de l'√©quipement: {last_item.boundingRect().width()} x {last_item.boundingRect().height()}\n")
            #print(f"Centre de l'√©quipement: {last_item.center.x()}, {last_item.center.y()}\n")
            #si alignement horizontal
            if direction == "v":
                for item in selected_equipments[:-1]:
                    center = item.center
                    item.setPos(item.pos().x(), last_pos.y()-center.y()+last_pos_center.y())
            elif direction == "h":
                for item in selected_equipments[:-1]:
                    center = item.center
                    item.setPos(last_pos.x()-center.x()+last_pos_center.x(), item.pos().y())

    def distribute_selected_equipment(self, direction):
        print(f"Distribution de l'√©quipement s√©lectionn√©: {direction}")

        #la liste des √©l√©ments s√©lectionn√©s
        selected_equipments = [self.equipment_items[eq_id] for eq_id in self.selected_equipments if eq_id in self.equipment_items]
        if len(selected_equipments) < 3:
            print("‚ùå Pas assez d'√©quipements s√©lectionn√©s pour distribuer")
            return False

        #Si distrbution horizontale
        if direction == "h":
            xmin = min(item.pos().x() for item in selected_equipments)
            xmax = max(item.pos().x() for item in selected_equipments)
            spacing = (xmax - xmin) / (len(selected_equipments) - 1)
            for i, item in enumerate(selected_equipments):
                item.setPos(xmin + i * spacing, item.pos().y())
        elif direction == "v":
            ymin = min(item.pos().y() for item in selected_equipments)
            ymax = max(item.pos().y() for item in selected_equipments)
            spacing = (ymax - ymin) / (len(selected_equipments) - 1)
            for i, item in enumerate(selected_equipments):
                item.setPos(item.pos().x(), ymin + i * spacing)

        print(f"üîÑ {len(selected_equipments)} √©quipement(s) distribu√©s")
        # Mettre √† jour l'affichage
        self.update()

    #=========================================================================
    #fonctions li√©es aux connections
    #=========================================================================

    def set_interaction_mode(self, mode):
        """Change le mode d'interaction du canvas"""
        print(f"üéØ Mode d'interaction chang√© vers: {mode}")
        
        old_mode = self.interaction_mode
        self.interaction_mode = mode
        
        # Nettoyer l'ancien mode SEULEMENT si n√©cessaire
        if old_mode == "create_polyline" and self.is_creating_polyline:  # ‚Üê AJOUT DE LA CONDITION
            self.cancel_polyline_creation()
        
        # Configurer le nouveau mode
        if mode == "create_polyline":
            self.setCursor(Qt.CrossCursor)
            # Changer la couleur des ports libres pour les rendre plus visibles
            self.highlight_available_ports(True)
        else:
            self.setCursor(Qt.ArrowCursor)
            self.highlight_available_ports(False)

    def highlight_available_ports(self, highlight=True):
        """Met en √©vidence les ports disponibles pour connexion"""
        for equipment_item in self.equipment_items.values():
            for port in equipment_item.get_all_ports():
                if port.can_connect():  # Utilise la nouvelle m√©thode
                    if highlight:
                        port.set_visual_state(PortVisualState.PREVIEW)
                    else:
                        port.set_visual_state(PortVisualState.NORMAL)

    
    
    #----- Pour le visibilit√© ou non des ports connect√©-----------------

    def toggle_connected_ports_visibility(self):
        """Toggle l'affichage des ports connect√©s"""
        current_state = PortGraphicsItem.get_show_connected_ports()
        new_state = not current_state
        
        PortGraphicsItem.set_show_connected_ports(new_state)
        self.update_all_ports_visibility()
        
        status_msg = "Ports connect√©s affich√©s" if new_state else "Ports connect√©s cach√©s"
        print(f"üëª {status_msg}")
        return new_state

    def set_connected_ports_visibility(self, visible: bool):
        """D√©finit l'affichage des ports connect√©s"""
        PortGraphicsItem.set_show_connected_ports(visible)
        self.update_all_ports_visibility()
        
        status_msg = "affich√©s" if visible else "cach√©s"
        print(f"üëª Ports connect√©s {status_msg}")

    def update_all_ports_visibility(self):
        """Met √† jour la visibilit√© de tous les ports existants"""
        total_ports = 0
        updated_ports = 0
        
        for equipment_item in self.equipment_items.values():
            for port in equipment_item.get_all_ports():
                total_ports += 1
                old_visibility = port.isVisible()
                port.update_visibility()
                if old_visibility != port.isVisible():
                    updated_ports += 1
        
        print(f"üîÑ {updated_ports}/{total_ports} ports mis √† jour")

    def show_all_ports_temporarily(self, duration_ms: int = 3000):
        """Affiche temporairement tous les ports (pour debug/√©dition)"""
        
        # Sauvegarder l'√©tat actuel
        original_state = PortGraphicsItem.get_show_connected_ports()
        
        # Afficher tous les ports
        self.set_connected_ports_visibility(True)
        
        # Programmer le retour √† l'√©tat original
        if hasattr(self, 'temp_visibility_timer'):
            self.temp_visibility_timer.stop()
        
        from PyQt5.QtCore import QTimer
        self.temp_visibility_timer = QTimer()
        self.temp_visibility_timer.timeout.connect(lambda: self.set_connected_ports_visibility(original_state))
        self.temp_visibility_timer.setSingleShot(True)
        self.temp_visibility_timer.start(duration_ms)
        
        print(f"üëÅÔ∏è Affichage temporaire de tous les ports pendant {duration_ms}ms")

    def get_ports_visibility_info(self):
        """Retourne des statistiques sur la visibilit√© des ports"""
        total_ports = 0
        visible_ports = 0
        connected_ports = 0
        visible_connected_ports = 0
        
        for equipment_item in self.equipment_items.values():
            for port in equipment_item.get_all_ports():
                total_ports += 1
                if port.isVisible():
                    visible_ports += 1
                if port.connection_status == PortConnectionStatus.CONNECTED:
                    connected_ports += 1
                    if port.isVisible():
                        visible_connected_ports += 1
        
        return {
            'total_ports': total_ports,
            'visible_ports': visible_ports, 
            'connected_ports': connected_ports,
            'visible_connected_ports': visible_connected_ports,
            'global_setting': PortGraphicsItem.get_show_connected_ports()
        }

# =============================================================================
# EXEMPLE D'UTILISATION DANS MAIN_WINDOW
# =============================================================================

"""
# Dans votre main_window.py :

class FlowCADMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        
        # Cr√©er le canvas
        self.drawing_canvas = DrawingCanvas()
        
        # Connecter votre equipment_loader
        self.drawing_canvas.set_equipment_loader(self.equipment_loader)
        
        # Connecter les signaux
        self.drawing_canvas.equipment_dropped.connect(self.on_equipment_dropped)
        self.drawing_canvas.equipment_selected.connect(self.on_equipment_selected)
        self.drawing_canvas.port_selected.connect(self.on_port_selected)
    
    def on_equipment_dropped(self, equipment_id, equipment_def, position):
        print(f"Nouvel √©quipement: {equipment_id}")
        self.update_status_message(f"√âquipement ajout√©: {equipment_def.get('display_name')}")
    
    def on_equipment_selected(self, equipment_id):
        print(f"√âquipement s√©lectionn√©: {equipment_id}")
        # Mettre √† jour le panneau des propri√©t√©s
    
    def on_port_selected(self, equipment_id, port_id):
        print(f"Port s√©lectionn√©: {port_id} de {equipment_id}")
        # Pr√©parer le mode connexion
"""