# =============================================================================
# src/flowcad/gui/components/drawing_canvas.py - Version adapt√©e
# =============================================================================
"""
Zone de dessin principale avec support drag & drop d'√©quipements hydrauliques
"""

from PyQt5.QtWidgets import (QGraphicsView, QGraphicsScene, QGraphicsItem, 
                            QApplication, QMenu)
from PyQt5.QtCore import Qt, pyqtSignal, QPointF
from PyQt5.QtGui import QPen, QColor, QBrush, QWheelEvent, QContextMenuEvent
import json
from typing import Dict, List, Optional, Tuple

# Import de la nouvelle classe graphique
from ..graphics.equipment_graphics import (EquipmentGraphicsItem, PortGraphicsItem, 
                                         PortStatus, EquipmentGraphicsFactory)

class DrawingCanvas(QGraphicsView):
    """Zone de dessin principale pour FlowCAD"""
    
    # Signaux √©mis par le canvas
    equipment_dropped = pyqtSignal(str, dict, tuple)  # (equipment_id, equipment_def, position)
    equipment_selected = pyqtSignal(str)              # equipment_id
    equipment_deleted = pyqtSignal(str)               # equipment_id
    port_selected = pyqtSignal(str, str)              # (equipment_id, port_id)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Configuration de base
        self.setup_view()
        self.setup_scene()
        
        # Gestion des √©quipements
        self.equipment_counter = 0
        self.equipment_items: Dict[str, EquipmentGraphicsItem] = {}
        
        # Loader pour les chemins SVG (√† connecter avec votre loader)
        self.equipment_loader = None  # Sera d√©fini par la main_window
        
        # Mode d'interaction
        self.interaction_mode = "select"  # "select", "connect", "draw"
        
    def setup_view(self):
        """Configure la vue graphique"""
        
        # Style de base
        self.setStyleSheet("background-color: white; border: 1px solid #ccc;")
        
        # Mode de s√©lection
        self.setDragMode(QGraphicsView.RubberBandDrag)  # S√©lection par zone
        
        # Activer le drag & drop
        self.setAcceptDrops(True)
        
        # Activer le zoom avec la molette
        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)
        
        # Anti-aliasing pour un rendu plus lisse
        #self.setRenderHint(self.renderHints() | self.renderHints().Antialiasing)
    
    def setup_scene(self):
        """Configure la sc√®ne graphique"""
        
        # Cr√©er la sc√®ne
        self.scene = QGraphicsScene()
        self.setScene(self.scene)
        
        # D√©finir une grande zone de travail
        self.scene.setSceneRect(-1000, -1000, 4000, 4000)
        
        # Connecter les signaux de s√©lection de la sc√®ne
        self.scene.selectionChanged.connect(self.on_selection_changed)
        
        # Dessiner la grille de fond
        self.draw_background_grid()
    
    def draw_background_grid(self):
        """Dessine une grille de fond pour faciliter le positionnement"""
        
        scene_rect = self.scene.sceneRect()
        grid_size = 50
        
        # Couleur de grille discr√®te
        grid_pen = QPen(QColor(230, 230, 230), 0.5)
        
        # Lignes verticales
        x = scene_rect.left()
        while x <= scene_rect.right():
            self.scene.addLine(x, scene_rect.top(), x, scene_rect.bottom(), grid_pen)
            x += grid_size
        
        # Lignes horizontales  
        y = scene_rect.top()
        while y <= scene_rect.bottom():
            self.scene.addLine(scene_rect.left(), y, scene_rect.right(), y, grid_pen)
            y += grid_size
    
    def set_equipment_loader(self, loader):
        """D√©finit le loader pour obtenir les chemins SVG"""
        self.equipment_loader = loader
    
    # =============================================================================
    # GESTION DU DRAG & DROP
    # =============================================================================
    
    def dragEnterEvent(self, event):
        """D√©but du drag sur le canvas"""
        if event.mimeData().hasFormat('application/x-flowcad-equipment'):
            print("üéØ Drag d√©tect√© sur le canvas")
            event.acceptProposedAction()
            
            # Optionnel : changer le curseur ou afficher un aper√ßu
            self.setCursor(Qt.CrossCursor)
        else:
            event.ignore()
    
    def dragMoveEvent(self, event):
        """Mouvement pendant le drag"""
        if event.mimeData().hasFormat('application/x-flowcad-equipment'):
            event.acceptProposedAction()
        else:
            event.ignore()
    
    def dragLeaveEvent(self, event):
        """Fin du drag (sortie du canvas)"""
        self.setCursor(Qt.ArrowCursor)
        super().dragLeaveEvent(event)
    
    def dropEvent(self, event):
        """Drop d'un √©quipement sur le canvas"""
        if event.mimeData().hasFormat('application/x-flowcad-equipment'):
            
            # Remettre le curseur normal
            self.setCursor(Qt.ArrowCursor)
            
            # D√©coder les donn√©es de l'√©quipement
            json_data = event.mimeData().data('application/x-flowcad-equipment').data().decode()
            equipment_data = json.loads(json_data)
            
            equipment_id = equipment_data['equipment_id']
            equipment_def = equipment_data['equipment_def']
            
            # Position du drop en coordonn√©es de sc√®ne
            scene_pos = self.mapToScene(event.pos())
            drop_position = (scene_pos.x(), scene_pos.y())
            
            # Aligner sur la grille (optionnel)
            aligned_pos = self.align_to_grid(scene_pos)
            
            print(f"üéØ Drop de {equipment_id} √† la position {aligned_pos.x():.1f}, {aligned_pos.y():.1f}")
            
            # Cr√©er l'√©quipement sur le canvas
            self.add_equipment(equipment_id, equipment_def, aligned_pos)
            
            # √âmettre le signal
            self.equipment_dropped.emit(equipment_id, equipment_def, drop_position)
            
            event.acceptProposedAction()
        else:
            event.ignore()
    
    def align_to_grid(self, pos: QPointF, grid_size: int = 25) -> QPointF:
        """Aligne une position sur la grille"""
        aligned_x = round(pos.x() / grid_size) * grid_size
        aligned_y = round(pos.y() / grid_size) * grid_size
        return QPointF(aligned_x, aligned_y)
    
    # =============================================================================
    # GESTION DES √âQUIPEMENTS
    # =============================================================================
    
    def add_equipment(self, equipment_type: str, equipment_def: dict, position: QPointF) -> str:
        """Ajoute un √©quipement sur le canvas"""
        
        # G√©n√©rer un ID unique pour cette instance
        unique_id = f"{equipment_type}_{self.equipment_counter:03d}"
        self.equipment_counter += 1
        
        # Obtenir le chemin SVG si le loader est disponible
        svg_path = None
        if self.equipment_loader:
            try:
                svg_path = self.equipment_loader.get_svg_path(equipment_type)
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du chargement du SVG pour {equipment_type}: {e}")
        
        # Cr√©er l'√©l√©ment graphique
        equipment_item = EquipmentGraphicsFactory.create_equipment_graphics(
            unique_id, equipment_def, svg_path
        )
        
        # Positionner l'√©quipement
        equipment_item.setPos(position)
        
        # Ajouter √† la sc√®ne
        self.scene.addItem(equipment_item)
        
        # Stocker la r√©f√©rence
        self.equipment_items[unique_id] = equipment_item
        
        # Connecter les signaux des ports (si n√©cessaire)
        self.connect_equipment_signals(equipment_item)
        
        print(f"‚úÖ √âquipement {unique_id} ajout√© √† {position.x():.1f}, {position.y():.1f}")
        
        return unique_id
    
    def connect_equipment_signals(self, equipment_item: EquipmentGraphicsItem):
        """Connecte les signaux d'un √©quipement et de ses ports"""
        
        # Pour l'instant, on g√®re les clics sur ports directement dans PortGraphicsItem
        # Plus tard, on pourra ajouter des signaux personnalis√©s si n√©cessaire
        pass
    
    def remove_equipment(self, equipment_id: str) -> bool:
        """Supprime un √©quipement du canvas"""
        
        if equipment_id in self.equipment_items:
            equipment_item = self.equipment_items[equipment_id]
            
            # Retirer de la sc√®ne
            self.scene.removeItem(equipment_item)
            
            # Retirer de notre dictionnaire
            del self.equipment_items[equipment_id]
            
            print(f"üóëÔ∏è √âquipement {equipment_id} supprim√©")
            
            # √âmettre le signal
            self.equipment_deleted.emit(equipment_id)
            
            return True
        
        return False
    
    def get_equipment(self, equipment_id: str) -> Optional[EquipmentGraphicsItem]:
        """R√©cup√®re un √©quipement par son ID"""
        return self.equipment_items.get(equipment_id)
    
    def get_all_equipment(self) -> Dict[str, EquipmentGraphicsItem]:
        """R√©cup√®re tous les √©quipements"""
        return self.equipment_items.copy()
    
    def clear_all_equipment(self):
        """Supprime tous les √©quipements"""
        for equipment_id in list(self.equipment_items.keys()):
            self.remove_equipment(equipment_id)
    
    # =============================================================================
    # GESTION DE LA S√âLECTION
    # =============================================================================
    
    def on_selection_changed(self):
        """Callback quand la s√©lection change dans la sc√®ne"""
        
        selected_items = self.scene.selectedItems()
        
        for item in selected_items:
            if isinstance(item, EquipmentGraphicsItem):
                print(f"üìç √âquipement s√©lectionn√©: {item.equipment_id}")
                self.equipment_selected.emit(item.equipment_id)
            
            elif isinstance(item, PortGraphicsItem):
                parent_eq = item.parent_equipment
                if parent_eq:
                    print(f"üîå Port s√©lectionn√©: {item.port_id} de {parent_eq.equipment_id}")
                    self.port_selected.emit(parent_eq.equipment_id, item.port_id)
    
    def select_equipment(self, equipment_id: str):
        """S√©lectionne un √©quipement par programme"""
        equipment_item = self.get_equipment(equipment_id)
        if equipment_item:
            # D√©s√©lectionner tout
            self.scene.clearSelection()
            # S√©lectionner l'√©quipement
            equipment_item.setSelected(True)
            # Centrer la vue sur l'√©quipement
            self.centerOn(equipment_item)
    
    # =============================================================================
    # INTERACTION UTILISATEUR
    # =============================================================================
    
    def wheelEvent(self, event: QWheelEvent):
        """Zoom avec la molette de la souris"""
        
        # Facteur de zoom
        zoom_factor = 1.15
        
        if event.angleDelta().y() > 0:
            # Zoom avant
            self.scale(zoom_factor, zoom_factor)
        else:
            # Zoom arri√®re
            self.scale(1 / zoom_factor, 1 / zoom_factor)
    
    def keyPressEvent(self, event):
        """Gestion des raccourcis clavier"""
        
        if event.key() == Qt.Key_Delete:
            # Supprimer les √©l√©ments s√©lectionn√©s
            self.delete_selected_items()
        
        elif event.key() == Qt.Key_A and event.modifiers() & Qt.ControlModifier:
            # Ctrl+A : S√©lectionner tout
            for item in self.scene.items():
                if isinstance(item, EquipmentGraphicsItem):
                    item.setSelected(True)
        
        elif event.key() == Qt.Key_Escape:
            # √âchap : D√©s√©lectionner tout
            self.scene.clearSelection()
        
        else:
            super().keyPressEvent(event)
    
    def delete_selected_items(self):
        """Supprime les √©quipements s√©lectionn√©s"""
        
        selected_items = self.scene.selectedItems()
        equipment_to_delete = []
        
        for item in selected_items:
            if isinstance(item, EquipmentGraphicsItem):
                equipment_to_delete.append(item.equipment_id)
        
        # Supprimer les √©quipements
        for equipment_id in equipment_to_delete:
            self.remove_equipment(equipment_id)
    
    def contextMenuEvent(self, event: QContextMenuEvent):
        """Menu contextuel (clic droit)"""
        
        # Trouver l'item sous la souris
        scene_pos = self.mapToScene(event.pos())
        item = self.scene.itemAt(scene_pos, self.transform())
        
        if isinstance(item, EquipmentGraphicsItem):
            # Menu pour un √©quipement
            menu = QMenu(self)
            
            # Actions sur l'√©quipement
            properties_action = menu.addAction("üîß Propri√©t√©s")
            rotate_action = menu.addAction("‚Üª Rotation 90¬∞")
            menu.addSeparator()
            delete_action = menu.addAction("üóëÔ∏è Supprimer")
            
            # Ex√©cuter le menu
            action = menu.exec_(event.globalPos())
            
            if action == properties_action:
                print(f"Propri√©t√©s de {item.equipment_id}")
                # TODO: Ouvrir le panneau des propri√©t√©s
            
            elif action == rotate_action:
                print(f"Rotation de {item.equipment_id}")
                # TODO: Impl√©menter la rotation
                
            elif action == delete_action:
                self.remove_equipment(item.equipment_id)
        
        else:
            # Menu g√©n√©ral du canvas
            menu = QMenu(self)
            
            clear_action = menu.addAction("üóëÔ∏è Tout effacer")
            menu.addSeparator()
            fit_action = menu.addAction("üîç Ajuster la vue")
            
            action = menu.exec_(event.globalPos())
            
            if action == clear_action:
                self.clear_all_equipment()
            elif action == fit_action:
                self.fit_all_equipment()
    
    # =============================================================================
    # UTILITAIRES DE VUE
    # =============================================================================
    
    def fit_all_equipment(self):
        """Ajuste la vue pour voir tous les √©quipements"""
        if self.equipment_items:
            self.fitInView(self.scene.itemsBoundingRect(), Qt.KeepAspectRatio)
        else:
            # Retour √† la vue par d√©faut
            self.setSceneRect(-500, -500, 1000, 1000)
            self.fitInView(self.sceneRect(), Qt.KeepAspectRatio)
    
    def zoom_to_fit(self):
        """Alias pour fit_all_equipment"""
        self.fit_all_equipment()
    
    def reset_zoom(self):
        """Remet le zoom √† 100%"""
        self.resetTransform()
    
    # =============================================================================
    # M√âTHODES POUR L'INT√âGRATION
    # =============================================================================
    
    def get_equipment_count(self) -> int:
        """Retourne le nombre d'√©quipements sur le canvas"""
        return len(self.equipment_items)
    
    def get_connection_count(self) -> int:
        """Retourne le nombre de connexions (pour plus tard)"""
        # TODO: Impl√©menter quand on aura les connexions
        return 0
    
    def export_equipment_data(self) -> List[dict]:
        """Exporte les donn√©es des √©quipements (pour sauvegarde)"""
        equipment_data = []
        
        for eq_id, eq_item in self.equipment_items.items():
            pos = eq_item.pos()
            data = {
                'equipment_id': eq_id,
                'equipment_def': eq_item.equipment_def,
                'position': {'x': pos.x(), 'y': pos.y()},
                'ports': {}
            }
            
            # Ajouter l'√©tat des ports
            for port_id, port_item in eq_item.ports.items():
                data['ports'][port_id] = {
                    'status': port_item.status.value
                }
            
            equipment_data.append(data)
        
        return equipment_data

# =============================================================================
# EXEMPLE D'UTILISATION DANS MAIN_WINDOW
# =============================================================================

"""
# Dans votre main_window.py :

class FlowCADMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        
        # Cr√©er le canvas
        self.drawing_canvas = DrawingCanvas()
        
        # Connecter votre equipment_loader
        self.drawing_canvas.set_equipment_loader(self.equipment_loader)
        
        # Connecter les signaux
        self.drawing_canvas.equipment_dropped.connect(self.on_equipment_dropped)
        self.drawing_canvas.equipment_selected.connect(self.on_equipment_selected)
        self.drawing_canvas.port_selected.connect(self.on_port_selected)
    
    def on_equipment_dropped(self, equipment_id, equipment_def, position):
        print(f"Nouvel √©quipement: {equipment_id}")
        self.update_status_message(f"√âquipement ajout√©: {equipment_def.get('display_name')}")
    
    def on_equipment_selected(self, equipment_id):
        print(f"√âquipement s√©lectionn√©: {equipment_id}")
        # Mettre √† jour le panneau des propri√©t√©s
    
    def on_port_selected(self, equipment_id, port_id):
        print(f"Port s√©lectionn√©: {port_id} de {equipment_id}")
        # Pr√©parer le mode connexion
"""